buildscript {
    ext {
        versions = [
                project: '0.8.1-alpha.15',
                prod   : [
                        jsch       : '0.1.55',
                        snakeyaml  : '2.0',
                        javalite   : '1.2.2',
                        jpa        : '2.2',
                        cucumber   : '6.10.4',
                        jackson    : '2.9.0',
                        orika      : '1.5.4',
                        reflections: '0.9.11'
                ],
                test   : [
                        junit            : '5.3.1',
                        assertj          : '3.21.0',
                        mockito          : '4.0.0',
                        lombok           : '1.18.4',
                        cucumber         : '6.10.4',
                        jackson          : '2.13.1',
                        jsonassert       : '1.5.0',
                        pitest           : [
                                plugin  : '1.15.0',
                                elements: '0.6.3',
                                junit5  : '1.0.0'
                        ],
                        zip4j            : '2.10.0',
                        awaitility       : '3.0.0',
                        cucumberJunit    : '5.1.1',
                        h2               : '1.4.200',
                        jpa              : '2.2',
                        hibernate        : '5.4.0.Final',
                        guava            : '20.0',
                        mockserver       : '5.11.2',
                        commonsFileupload: '1.4',
                ]
        ]
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "info.solidsoft.gradle.pitest:gradle-pitest-plugin:${versions.test.pitest.plugin}"
    }
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'io.github.gradle-nexus.publish-plugin' version '2.0.0'
}

task currentVersion {
    doLast {
        println versions.project
    }
}

group = 'com.github.leeonky'

nexusPublishing {
    repositories {
        sonatype {
            username = System.env.ossrhUsername
            password = System.env.ossrhPassword
            nexusUrl.set(uri("https://ossrh-staging-api.central.sonatype.com/service/local/"))
        }
    }
}

subprojects {
    ext {
        projectName = project.projectDir.name
    }

    jacoco {
        toolVersion = "0.8.2"
    }

    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'com.github.kt3k.coveralls'

    task javadocJar(type: Jar, dependsOn: classes) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    task sourcesJar(type: Jar, dependsOn: javadoc) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    group = 'com.github.leeonky'
    version = versions.project
    sourceCompatibility = 1.8

    jacocoTestReport {
        reports {
            xml.enabled = true // for coveralls
            html.enabled = true
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter-api:${versions.test.junit}"
        testImplementation "org.junit.jupiter:junit-jupiter-params:${versions.test.junit}"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${versions.test.junit}"

        testImplementation "org.mockito:mockito-inline:${versions.test.mockito}"

        testImplementation "org.assertj:assertj-core:${versions.test.assertj}"

        testAnnotationProcessor "org.projectlombok:lombok:${versions.test.lombok}"
        testCompile "org.projectlombok:lombok:${versions.test.lombok}"
    }

    test {
        systemProperty("cucumber.publish.quiet", true)
        useJUnitPlatform {
            excludeTags("disabled")
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = projectName
                from(components.java)
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = projectName
                    description = projectName
                    url = 'https://github.com/leeonky/test-charm-java/' + projectName

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = 'leeonky'
                            name = 'Liangchen'
                            email = 'leeonky@gmail.com'
                        }
                    }

                    scm {
                        connection = 'scm:git:https://github.com/leeonky/test-charm-java.git'
                        developerConnection = 'scm:git:git@github.com:leeonky/test-charm-java.git'
                        url = 'https://github.com/leeonky/test-charm-java.git'
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications.mavenJava
    }

    tasks.coveralls {
        dependsOn jacocoTestReport
    }

    def enablePitest = { name, target, excluded ->
        if (projectName == name) {
            project.apply plugin: 'info.solidsoft.pitest'

            project.dependencies {
                pitest "io.github.wmaarts:pitest-mutation-testing-elements-plugin:${versions.test.pitest.elements}"
            }

            project.pitest {
                targetClasses = target
                excludedClasses = excluded
                outputFormats = ['HTML', 'HTML2']
                threads = 8
                junit5PluginVersion = versions.test.pitest.junit5
            }

            task uploadPitestReport {
                doLast {
                    def baseUrl = 'https://dashboard.stryker-mutator.io'
                    def url = new URL("${baseUrl}/api/reports/github.com/leeonky/test-charm-java/main?module=${projectName}")
                    def connection = url.openConnection() as HttpURLConnection
                    def reportFile = new File("${projectName}/build/reports/pitest/html2/report.js")
                    def reportJson = reportFile.text.substring(60)

                    connection.requestMethod = "PUT"
                    connection.doOutput = true
                    connection.setRequestProperty("Content-Type", "application/json")
                    connection.setRequestProperty("Host", "dashboard.stryker-mutator.io")
                    connection.setRequestProperty("X-Api-Key", System.env.PI_KEY)

                    connection.outputStream.withWriter("UTF-8") { writer ->
                        writer.write(reportJson)
                    }

                    println "Response Code: ${connection.responseCode}"
                    println "Response Message: ${connection.responseMessage}"

                    if (connection.responseCode == HttpURLConnection.HTTP_OK || connection.responseCode == HttpURLConnection.HTTP_CREATED) {
                        println 'Response content:'
                        println connection.inputStream.text
                    }

                    connection.disconnect()
                }
            }

            tasks.named('pitest').configure {
                finalizedBy 'uploadPitestReport'
            }
        }
    }

    def configCucumber = { name, glues ->
        if (projectName == name) {
            dependencies {
                testImplementation "io.cucumber:cucumber-java:${versions.test.cucumber}"
            }

            configurations {
                cucumberRuntime {
                    extendsFrom testImplementation
                }
            }

            def cucumberArgs = ['--plugin', 'pretty']
            for (glue in glues) {
                cucumberArgs.add('--glue')
                cucumberArgs.add(glue)
            }
            cucumberArgs.add(projectName + '/src/test/resources/features')

            task cucumber() {
                dependsOn assemble, testClasses
                doLast {
                    javaexec {
                        environment('CUCUMBER_PUBLISH_QUIET', true)
                        main = "io.cucumber.core.cli.Main"
                        classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
                        args = cucumberArgs
                    }
                }
            }
        }
    }

    enablePitest('bean-util', ['com.github.leeonky.util.*'], [])
    enablePitest('interpreter-core', ['com.github.leeonky.interpreter.*'], [])
//    enablePitest('DAL-java', ['com.github.leeonky.dal.*'], ['com.github.leeonky.dal.spec.*', 'com.github.leeonky.dal.runtime.Schema'])
//    enablePitest('DAL-extension-basic', ['com.github.leeonky.dal.*'], ['com.github.leeonky.dal.cucumber.*'])
//    enablePitest('DAL-extension-jdbc', ['com.github.leeonky.dal.*'], [])
//    enablePitest('DAL-extension-jfactory', ['com.github.leeonky.dal.*'], [])
//    enablePitest('jfactory', ['com.github.leeonky.jfactory.*'], ['com.github.leeonky.jfactory.spec.*'])
//    enablePitest('jfactory-repo-jpa', ['com.github.leeonky.jfactory.repo*'], ['com.github.leeonky.jfactory.repo.beans.*'])
//    enablePitest('jfactory-cucumber', ['com.github.leeonky.jfactory.cucumber*'], ['com.github.leeonky.jfactory.cucumber.entity.*'])
//    enablePitest('jfactory-property-value', ['com.github.leeonky.jfactory.*'], ['com.github.leeonky.jfactory.specs.*', 'com.github.leeonky.jfactory.entity'])
//    enablePitest('RESTful-cucumber', ['com.github.leeonky.cucumber.restful*'], [])

    configCucumber('interpreter-core', ['com.github.leeonky.interpreter'])
    configCucumber('DAL-java', ['com.github.leeonky.dal.cucumber'])
    configCucumber('DAL-extension-basic', ['com.github.leeonky.dal.cucumber'])
    configCucumber('DAL-extension-debugger', ['com.github.leeonky.dal.cucumber'])
    configCucumber('DAL-extension-jdbc', ['com.github.leeonky'])
    configCucumber('DAL-extension-jfactory', ['com.github.leeonky'])
    configCucumber('DAL-extension-inspector', ['com.github.leeonky'])
    configCucumber('jfactory', ['com.github.leeonky'])
    configCucumber('jfactory-cucumber', ['com.github.leeonky.jfactory.cucumber'])
    configCucumber('jfactory-property-value', ['com.github.leeonky'])
    configCucumber('RESTful-cucumber', ['com.github.leeonky.cucumber.restful'])
    configCucumber('page-flow', ['com.github.leeonky.pf.cucumber'])

    test {
        reports {
            html.destination = file("${rootProject.buildDir}/tests/${project.name}")
            junitXml.destination = file("${rootProject.buildDir}/tests/${project.name}")
        }
    }
}

project(":DAL-extension-inspector") {
    tasks.named("test") {
        mustRunAfter(":page-flow:test")
    }
}

project(":page-flow") {
    tasks.named("test") {
        mustRunAfter(":page-flow-playwright:test")
        mustRunAfter(":page-flow-selenium:test")
    }
}
